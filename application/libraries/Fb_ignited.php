<?php
/**
 * Facebook Ignited by Dark Prospect Games
 *
 * PHP version 5
 *
 * @category  FBIgnited
 * @package   FBIgnited
 * @author    Alfonso E Martinez, III <admin@darkprospect.net>
 * @copyright 2011-2013 Dark Prospect Games, LLC
 * @license   BSD https://darkprospect.net/BSD-License.txt
 * @link      https://github.com/DarkProspectGames/Facebook-Ignited
 */
if (!defined('BASEPATH')) {
    exit('No direct script access allowed');
}

require_once 'Facebook.php';
require_once 'FBIgnitedException.php';

/**
 * Facebook Ignited by Dark Prospect Games
 *
 * Facebook Ignited, an open source extension and wrapper for the Facebook PHP SDK contained
 * within a CodeIgniter Library. It takes several common functionalities in the Facebook
 * Documentation and creates methods for the user to quickly code a Facebook Site or
 * Application with the ease of CodeIgniter.
 *
 * Do Not Edit This File, Could Cause Disruption of App
 *
 * @category FBIgnited
 * @package  FBIgnited
 * @author   Alfonso E Martinez, III <admin@darkprospect.net>
 * @license  BSD https://darkprospect.net/BSD-License.txt
 * @version  Release: 1.3.2
 * @link     https://github.com/DarkProspectGames/ObsidianMoonEngine
 */
class Fb_ignited
{

    /**
     * @var mixed This holds the instance of the Facebook PHP SDK.
     */
    private $CI;

    /**
     * @var Facebook This holds the instance of the Facebook PHP SDK.
     */
    private $facebook;

    /**
     * @var array this variable holds all of the global settings for Facebook Ignited
     */
    private $globals;

    /**
     * @var int this variable holds the Facebook user's id
     */
    public $userid;

    /**
     * Constructor for Facebook Ignited
     *
     * This grabs the variables from your config/fb_ignited.php file and
     * stores them in the globals variable, while passing the necessary configs
     * to the Facebook SDK when it is called.
     *
     * @param array $params configurations for Facebook Ignited and Facebook PHP SDK
     */
    public function __construct($params)
    {
        parse_str($_SERVER['QUERY_STRING'], $fb_query_strings);
        if (isset($fb_query_strings['state'])) {
            $_REQUEST['state'] = $fb_query_strings['state'];
        }

        if (isset($fb_query_strings['code'])) {
            $_REQUEST['code'] = $fb_query_strings['code'];
        }

        $this->CI       =& get_instance();
        $fb_params      = $this->fb_set_globals($params);
        $this->facebook = new Facebook($fb_params);
        $this->userid   = $this->facebook->getUser();
    }

    /**
     * Call Method for Facebook Ignited
     *
     * This method is used to make sure that if the method being called from the
     * class is not present it will then look into the Facebook SDK, check if it exists.
     * If it does not then it returns a false which the user can use to determine what to do.
     *
     * @param string $method method not included in Facebook Ignited
     * @param array  $params parameters being passed to the method
     *
     * @return mixed
     * @throws FBIgnitedException
     */
    public function __call($method, $params)
    {
        $this->CI->load->helper('params');
        if (method_exists($this->facebook, $method)) {
            try {
                $value = wrap_call_user_func_array($this->facebook, $method, $params);
            } catch (FacebookApiException $e) {
                throw new FBIgnitedException("Error trying {$method}(): " . $e->getMessage(), $e, $this->globals['fb_logexcept']);
            }
        } else {
            throw new FBIgnitedException("Could not find the method {$method} in Facebook Class.", null, null, $this->globals['fb_logexcept']);
        }

        return $value;
    }

    /**
     * Handles Friend Requests
     *
     * This function will handle all your friend requests. After the system calls the function it will pass
     * $request_ids to it. Make sure you accept and do with it as you will. Your system must have CURL
     * enabled to utilize this specific method.
     *
     * @param mixed      $request_ids The ids of the requests we will be processing.
     * @param bool|array $callback    The callback model and method to be used.
     *
     * @return bool|string
     * @throws FBIgnitedException
     */
    public function fb_accept_requests($request_ids, $callback = false)
    {
        $request_ids  = explode(',', $request_ids);
        $result_value = false;
        if (is_array($callback)) {
            $file   = $callback['file'];
            $method = $callback['method'];
            if ($this->CI->load->model($file)) {
                $this->CI->$file->$method($request_ids);
            }
        }

        foreach ($request_ids as $value) {
            $request_data = $this->facebook->api("/{$value}");
            if ($request_data['from']) {
                $full_request_id = "{$value}_{$this->userid}";
                try {
                    $result = $this->facebook->api($full_request_id, 'DELETE');
                } catch (FacebookApiException $e) {
                    throw new FBIgnitedException($e->getMessage(), $e, $this->globals['fb_logexcept']);
                }
                if ($result) {
                    if (strlen($result_value) > 0) {
                        $result_value .= ', ';
                    }

                    $result_value .= $request_data['from']['name'];
                }
            }
        }

        return $result_value;
    }

    /**
     * Checks User Permissions
     *
     * Checks if the permission type enquired about is authenticated and accepted by the uer.
     *
     * @param string $perm   the permission that will be checked
     * @param null   $extend tells the method whether or not to extend the users permissions
     *
     * @return bool|string
     * @throws FBIgnitedException
     */
    public function fb_check_permissions($perm, $extend = null)
    {
        try {
            $data = $this->fb_fql("SELECT {$perm} FROM permissions WHERE uid = me()");
        } catch (FBIgnitedException $e) {
            throw new FBIgnitedException('fb_fql() : ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
        }
        $permission = implode(',', array_keys(array_diff($data[0], array(1))));
        if (!$permission) {
            return true;
        } else {
            if ($extend === null) {
                return false;
            } else {
                $extend['scope'] = 'perm';
                $url             = $this->fb_login_url($extend);
                if ($extend['script'] == true) {
                    echo $url;
                    exit;
                } else {
                    return $url;
                }
            }
        }
    }

    /**
     * Creates An Event
     *
     * This method creates an event
     *
     * @param array $fb_event_array An array that will be converted to JSON and used to create the event.
     * @param mixed $callback       An optional callback that will used to handle the results.
     *
     * @return mixed
     * @throws FBIgnitedException
     */
    public function fb_create_event($fb_event_array, $callback = null)
    {
        $fb_event_utf8 = array_map('utf8_encode', $fb_event_array);
        $param         = array(
                          'method'     => 'event.create',
                          'event_info' => json_encode($fb_event_utf8),
                          'callback'   => $callback,
                         );
        try {
            $eventID = $this->facebook->api($param);
        } catch (FacebookApiException $e) {
            throw new FBIgnitedException('fb_create_event() - Facebook::api() exception caught: ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
        }

        return $eventID;
    }

    /**
     * Modifies The User's Feed
     *
     * This method will either post to the user's feed or delete posts that were
     * created by the application
     *
     * @param string $method Method that we are going to use.
     * @param mixed  $id     ID to use for deleting from feed.
     * @param mixed  $values Values of the details to be used.
     *
     * @return mixed
     * @throws FBIgnitedException
     */
    public function fb_feed($method, $id = null, $values = null)
    {
        $response = null;
        if ($method == 'post') {
            try {
                $response = $this->facebook->api("/$id/feed", 'post', $values);
            } catch (FacebookApiException $e) {
                throw new FBIgnitedException('fb_feed() - Facebook::api() exception caught: ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
            }
            if (!preg_match('/^[0-9_]+$/', $response)) {
                throw new FBIgnitedException('fb_feed() - Facebook::api() returned an invalid value.', null, $this->globals['fb_logexcept']);
            }
        } else if ($method == 'delete') {
            try {
                $response = $this->facebok->api("/$id", 'delete');
            } catch (FBIgnitedException $e) {
                throw new FBIgnitedException('fb_feed() - Facebook::api() exception caught: ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
            }
        }

        return $response;
    }

    /**
     * Handles Facebook Queries
     *
     * This function is a wrapper for fql it creates a method call to api
     *
     * @param mixed $fqlquery Query to be sent to Facebook.
     *
     * @return mixed
     * @throws FBIgnitedException
     */
    public function fb_fql($fqlquery)
    {
        if (is_array($fqlquery)) {
            $fqlquery = json_encode($fqlquery);
        }

        try {
            $fql_obj = $this->facebook->api(array('method' => 'fql.query', 'query' => $fqlquery));
        } catch (FacebookApiException $e) {
            throw new FBIgnitedException('fb_fql() - Facebook::api() exception caught: ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
        }

        return $fql_obj;
    }

    /**
     * Get Application Configurations
     *
     * If needed we return all of the global configurations.
     *
     * @param string $variable The name of the global variable we will be requesting.
     *
     * @return array|bool
     */
    public function fb_get_app($variable = '')
    {
        if ($variable != '') {
            if (isset($this->globals[$variable])) {
                return $this->globals[$variable];
            } else {
                return false;
            }
        } else {
            return $this->globals;
        }
    }

    /**
     * Returns the user's information
     *
     * This returns all of the information for the user from facebook,
     * if it can't recieve anything its due to no authorization so refer them
     * to it.
     *
     * @param mixed $redirect determines if the user will be redirected
     * @param mixed $script   determines if a header or javascript redirect occurs
     *
     * @return mixed
     * @throws FBIgnitedException
     */
    public function fb_get_me($redirect = false, $script = true)
    {
        $this->CI->load->helper('url');
        if ($this->userid != null) {
            try {
                $me = $this->facebook->api('/me');
            } catch (FacebookApiException $e) {
                $this->userid = null;
                throw new FBIgnitedException('fb_get_me(): ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
            }

            return $me;
        } else {
            if ($redirect == true) {
                $loc = $this->fb_login_url(array('script' => $script));
                if ($script == true) {
                    echo $loc;
                } else {
                    redirect($loc);
                }

                exit;
            } else {
                return false;
            }
        }//end if
    }

    /**
     * Determines if the user bookmarked the app
     *
     * This method will check to see if the users have bookmarked the application
     *
     * @return boolean
     * @throws FBIgnitedException
     */
    public function fb_is_bookmarked()
    {
        try {
            $datas = $this->fb_fql('SELECT bookmarked FROM permissions WHERE uid = me()');
        } catch (FBIgnitedException $e) {
            throw new FBIgnitedException('fb_is_bookmarked(): ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
        }
        if ($datas) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Determines if the user has liked the app
     *
     * This method will check to see if the users have liked the application
     *
     * @return boolean
     * @throws FBIgnitedException
     */
    public function fb_is_liked()
    {
        try {
            $request = $this->facebook->api("/{$this->userid}/likes/{$this->globals['fb_pageid']}");
        } catch (FacebookApiException $e) {
            throw new FBIgnitedException('fb_is_liked() - exception caught: ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
        }
        if ($request['data'] || $request->data) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Returns a list of the user's friends
     *
     * This method will return either the user's full list of friends or
     * just the users also using the application
     *
     * @param string $value determines what will be selected from users
     * @param string $list  dermines full friends list or app friends only
     *
     * @return mixed
     * @throws FBIgnitedException
     */
    public function fb_list_friends($value = 'uid', $list = '')
    {
        if ($list == 'full') {
            $fquery = "SELECT {$value} FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1 = me())";
        } else {
            $fquery = "SELECT {$value} FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1 = me()) AND is_app_user = 'true'";
        }

        try {
            $friends = $this->fb_fql($fquery);
        } catch (FBIgnitedException $e) {
            throw new FBIgnitedException('fb_list_friends(): ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
        }

        return $friends;
    }

    /**
     * Returns the Facebook login url
     *
     * This method will return a url either as just the url or with a script
     * encapsulating it.
     *
     * @param array $params configures how the login url will be handled
     *
     * @return string
     * @throws FBIgnitedException
     */
    public function fb_login_url($params = null)
    {
        if (!isset($params['scope'])) {
            $params['scope'] = $this->globals['fb_auth'];
        }

        if (!isset($params['redirect'])) {
            $params['redirect'] = $this->globals['fb_canvas'];
        }

        $url = $this->facebook->getLoginUrl(
            array(
             'scope'        => $params['scope'],
             'redirect_uri' => $params['redirect'],
            )
        );
        if (isset($params['script']) && $params['script'] == true) {
            $url = "<script>top.location.href='" . $url . "'</script>";
        }

        return $url;
    }

    /**
     * Returns the Facebook logout url
     *
     * This method creates a logout url that your users
     * can be redirected towards. If the $next variable is set
     * user will be redirect to the $next controller function after the logout process.
     * $next must be in the declared canvas or end with /
     *
     * @param string  $next   the location to forward to when user logs out
     * @param boolean $script determines if we use a script or not
     *
     * @return string
     * @throws FBIgnitedException
     */
    public function fb_logout_url($next = '', $script = false)
    {
        if (substr($this->globals['fb_canvas'], -1) == '/') {
            $redirect = $this->globals['fb_canvas'] . $next;
        } else {
            $redirect = $this->globals['fb_canvas'] . '/' . $next;
        }

        $url = $this->facebook->getLogoutUrl(array('next' => $redirect));
        if ($script == true) {
            $url = "<script>top.location.href='" . $url . "'</script>";
        }

        return $url;
    }

    /**
     * Posts a notification to users
     *
     * This method pushes a message to
     *
     * @param string  $message the message that will be pushed to the user
     * @param boolean $user_id the user id that we are pushing the notification to
     *
     * @return mixed
     * @throws FBIgnitedException
     */
    public function fb_notification($message, $user_id = null)
    {
        if ($user_id === null) {
            $user_id = $this->userid;
        }

        $data = array(
                 'href'         => $this->globals['fb_canvas'],
                 'access_token' => $this->facebook->getAccessToken(),
                 'template'     => $message,
                );
        try {
            $send_result = $this->facebook->api("/$user_id/notifications", 'post', $data);
        } catch (FacebookApiException $e) {
            throw new FBIgnitedException('fb_notification() - exception caught: ' . $e->getMessage(), $e, $this->globals['fb_logexcept']);
        }

        return $send_result;
    }

    /**
     * Reserved for posting a user's activity
     *
     * @return void
     */
    public function fb_post_activity()
    {

    }

    /**
     * Processes Facebook Credit
     *
     * This method will conduct the processing of Facebook Credits
     *
     * @return string
     * @throws FBIgnitedException
     */
    public function fb_process_credits()
    {
        $data    = array('content' => array());
        $request = $this->facebook->getSignedRequest();
        if ($request == null) {
            throw new FBIgnitedException('Bad signed request in fb_process_credits()', null, $this->globals['fb_logexcept']);
        }

        $me       = $this->fb_get_me();
        $payload  = $request['credits'];
        $func     = $this->CI->input->get_post('method');
        $order_id = $payload['order_id'];
        if ($func == 'payments_status_update') {
            $status = $payload['status'];
            if ($status == 'placed') {
                $next_state                = 'settled';
                $data['content']['status'] = $next_state;
                $this->CI->db->where('order_id', $order_id);
                $this->CI->db->update('fb_item_cache', array('finalized' => '1'));
            }

            $data['content']['order_id'] = $order_id;
        } else if ($func == 'payments_get_items') {
            $order_info = stripcslashes($payload['order_info']);
            $item_info  = json_decode($order_info, true);
            $item       = null;
            if ($item_info != '') {
                $this->CI->db->select('title, price, description, image_url, product_url')->from('fb_item_store')->where(array('item_id' => $item_info));
                $query = $this->CI->db->get();
                $item  = $query->row_array();
                $data  = array(
                          'userid'    => $me['id'],
                          'item_id'   => $item_info,
                          'order_id'  => $order_id,
                          'finalized' => 0,
                          'time'      => time(),
                         );
                $this->CI->db->insert('fb_item_cache', $data);
            }

            $url_key = array(
                        'product_url',
                        'image_url',
                       );
            foreach ($url_key as $key) {
                if (substr($item[$key], 0, 7) != 'http://') {
                    $item[$key] = 'http://' . $item[$key];
                }
            }

            $data['content'] = array($item);
        }//end if

        $data['method'] = $func;

        return json_encode($data);
    }

    /**
     * Sets the global values for Facebook Ignited
     *
     * This function is designed to run the parameters through a security check
     * as well as set globals and return an array for the Facebook SDK to use.
     *
     * @param array $params What will be used to set global variables in the plugin.
     *
     * @return mixed
     */
    private function fb_set_globals($params)
    {
        $param_array = array();
        if (is_numeric($params['fb_appid'])) {
            $param_array['appId']      = $params['fb_appid'];
            $this->globals['fb_appid'] = $params['fb_appid'];
        }

        if (ctype_alnum($params['fb_secret'])) {
            $param_array['secret']      = $params['fb_secret'];
            $this->globals['fb_secret'] = $params['fb_secret'];
        }

        if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') {
            $this->globals['protocol'] = 'https';
        } else {
            $this->globals['protocol'] = 'http';
        }

        $this->globals['fb_auth']    = $params['fb_auth'];
        $this->globals['fb_apptype'] = $params['fb_apptype'];
        if ($this->globals['fb_apptype'] == 'iframe') {
            $this->globals['fb_canvas'] = "{$this->globals['protocol']}://apps.facebook.com/{$params['fb_canvas']}/";
        } else if ($this->globals['fb_apptype'] == 'connect') {
            if (preg_match('/^http:\/\//', $params['fb_canvas']) || preg_match('/^https:\/\//', $params['fb_canvas'])) {
                $this->globals['fb_canvas'] = $params['fb_canvas'];
            } else {
                $this->globals['fb_canvas'] = "{$this->globals['protocol']}://{$params['fb_canvas']}/";
            }
        }

        if ($params === false) {
            $this->globals['fb_logexcept'] = false;
        } else {
            $this->globals['fb_logexcept'] = true;
        }

        return $param_array;
    }

}